$ ./git-basics.sh 


>>>

>>>

>>>

>>> 1. git init within /Users/wilsonmar/git_stash-demo:
Initialized empty Git repository in /Users/wilsonmar/git_stash-demo/.git/
>>> 2. git add & commit -m"2. Add README.md and .gitignore to staging"
[master (root-commit) 0df9945] 1st commit - 2. Add README.md and .gitignore to staging
 2 files changed, 2 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 README.md
>>> NOTE: hash code 4ca8a19 and others are new with every run.

>>> 3. I'm Amy. I get ignored.

>>> 4. I'm Bob. I never go anywhere and stay untracked.

>>> "5. I'm Chris. I visit the Index." with git add (no commit yet)
>>> git add does not issue a response message unless there is an error.

>>> git add & commit 
[master e51ffe6] 2nd commit - 6. I'm Don. I got committed once.
 2 files changed, 2 insertions(+)
 create mode 100644 chris
 create mode 100644 don
>>> NOTE: chris and don got committed together.

>>> 7. I'm Ed. But I'll soon be modified.
[master 4629764] 3rd commit - 7. I'm Ed. But I'll soon be modified.
 1 file changed, 1 insertion(+)
 create mode 100644 ed
>>> Add 2nd line to file ed. cat ed shows two lines:
7. I'm Ed. But I'll soon be modified.
Now I'm outside.
>>> End of file we're actively working on.

>>> 8. I'm Finn. I  got edited and added back, but not committed.
[master 81d5d30] 4th commit - 8. I'm Finn. I  got edited and added back, but not committed.
 1 file changed, 1 insertion(+)
 create mode 100644 finn
>>> git add finn

>>> cat finn shows two lines:
8. I'm Finn. I got edited and added back, but not committed.
Now I'm outside.
>>> 9. finn and george are committed together as 2 files:
[master 505c338] 5th commit - 9a. I'm George. I'm a frequent traveler.
 2 files changed, 2 insertions(+)
 create mode 100644 george
[master 7636fc1] 6th commit - 9b. George is committed again.
 1 file changed, 1 insertion(+)

>>> 10. I'm Harry.
>>> Harry will be stashed and removed without entering commit.

>>> 11. Listing files (using ls -a) in folder git_stash-demo :
.          ..         .git       .gitignore README.md  amy        bob        chris      don        ed         finn       george     harry

>>> 12. Git status -s -b
## master
 M ed
?? bob
?? harry
>>> NOTE: Ignored (amy) and Committed files (chris, don, ed, finn, george) don't appear on git status.
>>> PROTIP: The M nex to file ed means Modified and thus being tracked by Git.

>>> 13. git log after initial commits:
* 7636fc1 6th commit - 9b. George is committed again. 0 seconds ago
* 505c338 5th commit - 9a. I'm George. I'm a frequent traveler. 0 seconds ago
* 81d5d30 4th commit - 8. I'm Finn. I  got edited and added back, but not committed. 0 seconds ago
* 4629764 3rd commit - 7. I'm Ed. But I'll soon be modified. 0 seconds ago
* e51ffe6 2nd commit - 6. I'm Don. I got committed once. 0 seconds ago
* 0df9945 1st commit - 2. Add README.md and .gitignore to staging 0 seconds ago

>>> 14. git reflog (of git actions) after initial commits:
7636fc1 (HEAD -> master) HEAD@{0}: commit: 6th commit - 9b. George is committed again.
505c338 HEAD@{1}: commit: 5th commit - 9a. I'm George. I'm a frequent traveler.
81d5d30 HEAD@{2}: commit: 4th commit - 8. I'm Finn. I got edited and added back, but not committed.
4629764 HEAD@{3}: commit: 3rd commit - 7. I'm Ed. But I'll soon be modified.
e51ffe6 HEAD@{4}: commit: 2nd commit - 6. I'm Don. I got committed once.
0df9945 HEAD@{5}: commit (initial): 1st commit - 2. Add README.md and .gitignore to staging

>>> 15. git checkout HEAD@{4} attempt (at TIME TRAVEL):
error: Your local changes to the following files would be overwritten by checkout:
	ed
Please commit your changes or stash them before you switch branches.
Aborting

>>> 16. git stash save "working on ed outside after adding Harry."
Saved working directory and index state On master: working on ed outside after adding Harry.
>>> NOTE: Untracked files do not get stashed by default.

>>> 17. git stash list:
stash@{0}: On master: working on ed outside after adding Harry.

>>> 18. git stash show:
 ed | 1 +
 1 file changed, 1 insertion(+)

>>> 19. git status -s -b after git stash and before going back in time:
## master
?? bob
?? harry
>>> NOTE: Untracked files still there on the sidelines.

>>> 20. git checkout HEAD@{4} when Don was committed:
Note: checking out 'HEAD@{4}'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at 4629764 3rd commit - 7. I'm Ed. But I'll soon be modified.

>>> 21. cat ed contents: It doesn't contain 2nd line:
7. I'm Ed. But I'll soon be modified.
>>> end of file.

>>> 22. ls -a - listing files after checkout:
.          ..         .git       .gitignore README.md  amy        bob        chris      don        ed         harry
>>> Notice finn and george are not included because they happen after the point of checkout.

>>> 23. git reflog -n 6 after checkout HEAD@{4}:
4629764 (HEAD) HEAD@{0}: checkout: moving from master to HEAD@{4}
7636fc1 (master) HEAD@{1}: reset: moving to HEAD
7636fc1 (master) HEAD@{2}: commit: 6th commit - 9b. George is committed again.
505c338 HEAD@{3}: commit: 5th commit - 9a. I'm George. I'm a frequent traveler.
81d5d30 HEAD@{4}: commit: 4th commit - 8. I'm Finn. I got edited and added back, but not committed.
4629764 (HEAD) HEAD@{5}: commit: 3rd commit - 7. I'm Ed. But I'll soon be modified.
>>> NOTE: finn, george are included in reflog because it lists all actions.

>>> 24. Line "Touched while away" is added to file don:

>>> 25. git status shows file done was modified:
## HEAD (no branch)
 M don
?? bob
?? harry

>>> 26. git checkout back to master:
M	don
Previous HEAD position was 4629764 3rd commit - 7. I'm Ed. But I'll soon be modified.
Switched to branch 'master'

>>> 27. Listing files shows the whole gang is back together (from amy to george).
.          ..         .git       .gitignore README.md  amy        bob        chris      don        ed         finn       george     harry

>>> 28. git status shows file after getting back to master:
6. I'm Don. I got committed once.
Touched while away
>>> Modification to don is carried forward.

>>> 29. git stash pop:
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   don
	modified:   ed

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	bob
	harry

no changes added to commit (use "git add" and/or "git commit -a")
Dropped refs/stash@{0} (12ae8d8eddb6f7234e87be3b3952ee8be5b489c7)

>>> 30. Git status -s -b after stack pop:
## master
 M don
 M ed
?? bob
?? harry

>>> 31. cat (display contents of) file ed:
7. I'm Ed. But I'll soon be modified.
Now I'm outside.
>>> NOTE: see the second line is back.

>>> 32. git stash list after pop:
>>> nothing returns if the list is empty.

>>> 33. git reflog after checkout master:
7636fc1 (HEAD -> master) HEAD@{0}: checkout: moving from 4629764ce79419c24b659837896392e2cf5c0bc3 to master
4629764 HEAD@{1}: checkout: moving from master to HEAD@{4}
7636fc1 (HEAD -> master) HEAD@{2}: reset: moving to HEAD

>>> 34a. Some prefer an alternate to stash in checking out a branch:
git checkout -b tmpbranch:
M	don
M	ed
Switched to a new branch 'tmpbranch'

>>> 34b. cat (display contents) of harry
10. I'm Harry.
>>> end of file

>>> 34c. git add & commit -m"saving harry" 
[tmpbranch afff8a1] saving harry
 1 file changed, 1 insertion(+)
 create mode 100644 harry

>>> 34d. git status -s -b after saving harry:
## tmpbranch
 M don
 M ed
?? bob

>>> 34f. checkout master
M	don
M	ed
Switched to branch 'master'

>>> 34g. Listing files shows the whole gang is back together (from amy to george).
.          ..         .git       .gitignore README.md  amy        bob        chris      don        ed         finn       george

